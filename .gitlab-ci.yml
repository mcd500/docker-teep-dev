variables:
    GIT_SUBMODULE_STRATEGY: recursive
    REPO: aistcpsec/teep-dev
    TEEP_DEV_DOCS_DIR: /home/user/teep-device/docs
    TEEP_DEV_PDF: teep-device.pdf
    TEEP_HTML_PKG: teep-device_readme_html.tar.gz
    LOCAL_TAM_IP: 127.0.0.1

stages:
    - tamproto
    - teep
    - create_rootfs

before_script:
    - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWD}

# Template for tamproto service
.tamproto_service: &tamproto_service
    before_script:
        - docker pull ${REPO}:tamproto
        - TAG_NAME=tamproto-${CI_JOB_ID}
        - docker run --rm --name ${TAG_NAME} --detach ${REPO}:tamproto
        - TAMIP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${TAG_NAME})
    after_script:
        - docker stop ${TAG_NAME}
        - docker rm ${TAG_NAME}

# Job for tamproto
teep-dev-tamproto:
    variables:
        BRANCH: master
    stage: tamproto
    tags:
        - fast-shells
    script:
        - docker build --build-arg BRANCH=${BRANCH} --build-arg
          CI_JOB_TOKEN=${CI_JOB_TOKEN} --rm -t ${REPO}:tamproto ./tamproto/master
        - docker push ${REPO}:tamproto

# Job for doxygen
teep-dev-doxygen:
    variables:
        BRANCH: master
    tags:
        - fast-shells
    stage: teep
    script:
        - docker pull aistcpsec/tee-distro-dev:doxygen-20.04
        - docker build --build-arg BRANCH=${BRANCH} --build-arg DEBUG_DATE=$(date +%s) --build-arg
          CI_JOB_TOKEN=${CI_JOB_TOKEN} --rm -t ${REPO}:doxygen ./doxygen/${BRANCH}
        - docker push ${REPO}:doxygen
        - docker run --name $CI_PIPELINE_ID -d ${REPO}:doxygen
        - docker wait $CI_PIPELINE_ID
        - docker cp $CI_PIPELINE_ID:${TEEP_DEV_DOCS_DIR}/${TEEP_DEV_PDF} $CI_PROJECT_DIR/${TEEP_DEV_PDF}
        - docker cp $CI_PIPELINE_ID:${TEEP_DEV_DOCS_DIR}/${TEEP_HTML_PKG} $CI_PROJECT_DIR/${TEEP_HTML_PKG}
    artifacts:
        name: "teep-device-docs"
        paths:
            - $CI_PROJECT_DIR/${TEEP_DEV_PDF}
            - $CI_PROJECT_DIR/${TEEP_HTML_PKG}
        expire_in: 1 week

# Job for sgx
teep-dev-sgx:
    <<: *tamproto_service
    variables:
        BRANCH: master
    tags:
        - fast-shells
    stage: teep
    script:
        - docker pull aistcpsec/taref-dev:sgx
        - docker build --build-arg BRANCH=${BRANCH} --build-arg DEBUG_DATE=$(date +%s) --build-arg
          CI_JOB_TOKEN=${CI_JOB_TOKEN} --build-arg TAMIP=${TAMIP} --rm -t ${REPO}:sgx ./sgx/${BRANCH}
        - docker push ${REPO}:sgx

# Job for sgx, branch wip
teep-dev-sgx-wip:
    <<: *tamproto_service
    variables:
        BRANCH: cose-try
    tags:
        - fast-shells
    stage: teep
    script:
        - docker pull aistcpsec/taref-dev:sgx
        - docker build --build-arg BRANCH=${BRANCH} --build-arg DEBUG_DATE=$(date +%s) --build-arg
          CI_JOB_TOKEN=${CI_JOB_TOKEN} --build-arg TAMIP=${TAMIP} --rm -t ${REPO}:sgx-wip ./sgx/branch-wip
        - docker push ${REPO}:sgx-wip

# Job for optee
teep-dev-optee:
    <<: *tamproto_service
    variables:
        BRANCH: master
    tags:
        - fast-shells
    stage: teep
    script:
        - docker pull aistcpsec/taref-dev:optee
        - docker build --build-arg BRANCH=${BRANCH} --build-arg DEBUG_DATE=$(date +%s) --build-arg
          CI_JOB_TOKEN=${CI_JOB_TOKEN} --build-arg TAMIP=${TAMIP} --rm -t ${REPO}:optee ./optee/${BRANCH}
        # - docker push ${REPO}:optee

# Job for optee to only make with local IP
# This make the teep-device to be executed in RPI3
teep-dev-optee-localip-make-only:
    <<: *tamproto_service
    variables:
        BRANCH: master
    tags:
        - shell117
    stage: teep
    script:
        - docker pull aistcpsec/taref-dev:optee
        - docker build --build-arg BRANCH=${BRANCH} --build-arg DEBUG_DATE=$(date +%s) --build-arg
          CI_JOB_TOKEN=${CI_JOB_TOKEN} --build-arg TAMIP=${LOCAL_TAM_IP} --rm -t ${REPO}:optee -f ./optee/${BRANCH}/Dockerfile_LocalTamIP .
        - docker push ${REPO}:optee


# Job for optee, branch wip
teep-dev-optee-wip:
    <<: *tamproto_service
    variables:
        BRANCH: cose-try
    tags:
        - fast-shells
    stage: teep
    script:
        - docker pull aistcpsec/taref-dev:optee
        - docker build --build-arg BRANCH=${BRANCH} --build-arg DEBUG_DATE=$(date +%s) --build-arg
          CI_JOB_TOKEN=${CI_JOB_TOKEN} --build-arg TAMIP=${TAMIP} --rm -t ${REPO}:optee-wip ./optee/branch-wip
        - docker push ${REPO}:optee-wip

# Job for keystone
teep-dev-keystone:
    <<: *tamproto_service
    variables:
        BRANCH: master
    tags:
        - fast-shells
    stage: teep
    script:
        - docker pull aistcpsec/taref-dev:keystone
        - docker build --build-arg BRANCH=${BRANCH} --build-arg DEBUG_DATE=$(date +%s) --build-arg
          CI_JOB_TOKEN=${CI_JOB_TOKEN} --build-arg TAMIP=${TAMIP} --rm -t ${REPO}:keystone ./keystone/${BRANCH}
        - docker push ${REPO}:keystone

# Job for keystone, branch wip
teep-dev-keystone-wip:
    <<: *tamproto_service
    variables:
        BRANCH: cose-try
    tags:
        - fast-shells
    stage: teep
    script:
        - docker pull aistcpsec/taref-dev:keystone
        - docker build --build-arg BRANCH=${BRANCH} --build-arg DEBUG_DATE=$(date +%s) --build-arg
          CI_JOB_TOKEN=${CI_JOB_TOKEN} --build-arg TAMIP=${TAMIP} --rm -t ${REPO}:keystone-wip 
          ./keystone/branch-wip
        - docker push ${REPO}:keystone-wip

# Job for push tamproto, ta-ref and teep-device into rootfs
teep-dev-optee-3.10.0_rpi3_netboot_nfs:
    tags:
        - shell117
    stage: create_rootfs
    variables:
        NETBOOT_CONT_NME: rootfs-tar-container
        ROOTFS_FILE: arm64-20.04-rootfs-teep-device.tar.xz
    script:
        - docker pull aistcpsec/tee-dev:optee-3.10.0_rpi3_netboot_nfs
        - docker pull aistcpsec/teep-dev:optee
        - docker build --rm -t ${REPO}:rootfs_teep-device_rpi3_netboot_nfs
           --build-arg CI_JOB_TOKEN=${CI_JOB_TOKEN}
           ./optee/3.10.0_rpi3_netboot_nfs
        - for i in {1..5}; do docker stop $NETBOOT_CONT_NME || true; done 
        - docker rm $NETBOOT_CONT_NME || true
        - docker run --privileged --cap-add=SYS_CHROOT --name $NETBOOT_CONT_NME
           -v $(pwd)/optee/3.10.0_rpi3_netboot_nfs:/mnt
           ${REPO}:rootfs_teep-device_rpi3_netboot_nfs /bin/bash
           -c "/mnt/customize-rootfs.sh > /mnt/net-nfs.log &&
               cp /arm64-20.04-rootfs-teep-device.tar.xz /mnt/"            
        - docker commit $NETBOOT_CONT_NME ${REPO}:rootfs_teep-device_rpi3_netboot_nfs
        - docker push ${REPO}:rootfs_teep-device_rpi3_netboot_nfs
        - for i in {1..5}; do docker stop $NETBOOT_CONT_NME || true; done
        - docker rm $NETBOOT_CONT_NME || true
    artifacts:
        paths:
            - optee/3.10.0_rpi3_netboot_nfs/${ROOTFS_FILE}
        expire_in: 1 week

teep-dev-optee_3.10.0_rpi3_netboot_sdimage:
    variables:
        MAKE_PATH: optee/3.10.0_rpi3_netboot_nfs
        # VC707_PASSWD <- value of this variable is added to gitlab ci as file
    tags:
        - fast-shells
    stage: create_rootfs
    script:
        - make pull -C ${MAKE_PATH}
        - make -C ${MAKE_PATH}
        - make upload -C ${MAKE_PATH}

